---

- name    : "DEBUG: dump environment variables"
  template:
    src    : debug/dump_environment_vars_2_json.j2
    dest   : /tmp/ansible_environment_vars.json

- name: manage_zfs | zpool list
  shell: "zpool list | awk 'FNR >1' | awk '{print $1}'"
  changed_when: false
  register: zpools
  check_mode: no
  when: zfs_pools is defined

- name: "DEBUG: zpools var"
  debug: var=zpools

- name: manage_zfs | zpool status
  shell: zpool status
  changed_when: false
  register: zpool_devices
  check_mode: no
  when: zfs_pools is defined

- name: "DEBUG: zpool_devices var"
  debug: var=zpool_devices

- name: "DEBUG: zpool_devices.stdout value"
  debug: var=zpool_devices.stdout

## zpool create

- name: "DEBUG: zfs_pools"
  debug: var=zfs_pools

- name: "DEBUG: zfs_create_pools"
  debug: var=zfs_create_pools

- name: "manage_zfs | zpool(s) create basic"
  command: "zpool create {{ item.options | join (' ') if item.options is defined else '' }} {{ item.name }} {{ item.devices|join (' ') }}"
  register: zpool_created
  with_items: "{{ zfs_pools }}"
  when: >
        zfs_pools is defined and
        zfs_create_pools and
        (item.type == "basic" and
        item.name not in zpools.stdout and
        item.state == "present") and
        item.devices[0] not in zpool_devices.stdout and
        item.action|lower == "create"

- name: "DEBUG: value of zpool_created"
  debug: var=zpool_created

- name: "manage_zfs | zpool add basic"
  command: "zpool add {{ item.options | join (' ') if item.options is defined else '' }} {{ item.name }} {{ item.devices|join (' ') }}"
  with_items: "{{ zfs_pools }}"
  when: >
        zfs_pools is defined and
        zfs_create_pools and
        (item.type == "basic" and
        item.state == "present") and
        item.devices[0] not in zpool_devices.stdout and
        item.action|lower == "add" and
        (zpool_created.changed or item.name in zpools.stdout)

#- name: manage_zfs | creating mirror/zraid zpool(s)
#  command: "zpool create {{ item.options | join (' ') if item.options is defined else '' }} {{ item.name }} {{ item.type }} {{ item.devices|join (' ') }}"
#  with_items: "{{ zfs_pools }}"
#  register: zpool_created
#  when: >
#        zfs_pools is defined and
#        zfs_create_pools and
#        (item.type != "basic" and
#        item.name not in zpools.stdout and
#        item.state == "present") and
#        item.devices[0] not in zpool_devices.stdout and
#        item.action|lower == "create"

#- name: "DEBUG: value of zpool_created"
#  debug: var=zpool_created


# Adds the specified virtual devices to the given pool.
# The vdev specification is described in the "Virtual Devices" section.
# The behavior of the -f option, and the device checks performed are described in the "zpool create" subcommand.
#
#- name: manage_zfs | adding mirror/zraid zpool(s)
#  command: "zpool add {{ item.options | join (' ') if item.options is defined else '' }} {{ item.name }} {{ item.type }} {{ item.devices|join (' ') }}"
#  with_items: "{{ zfs_pools }}"
#  when: >
#        zfs_pools is defined and
#        zfs_create_pools and
#        (item.type != "basic" and
#        item.state == "present") and
#        item.devices[0] not in zpool_devices.stdout and
#        item.action|lower == "add" and
#        (zpool_created.changed or item.name in zpools.stdout)

- name: manage_zfs | managing pools
  zfs:
    name: "{{ item.name }}"
    atime: "{{ item.atime|default(omit) }}"
    compression: "{{ item.compression|default(omit) }}"
    dedup: "{{ item.dedup|default(omit) }}"
    primarycache: "{{ item.primarycache|default(omit) }}"
    quota: "{{ item.quota|default(omit) }}"
    recordsize: "{{ item.recordsize|default(omit) }}"
    sharenfs: "{{ item.sharenfs|default(omit) }}"
    state: "{{ item.state }}"
    sync: "{{ item.sync|default(omit) }}"
  with_items: "{{ zfs_pools }}"
  when: zfs_create_pools

- name: manage_zfs | managing filesystems
  zfs:
    name: "{{ item.pool }}/{{ item.name }}"
    atime: "{{ item.atime|default(omit) }}"
    compression: "{{ item.compression|default(omit) }}"
    dedup: "{{ item.dedup|default(omit) }}"
    logbias: "{{ item.logbias|default(omit) }}"
    mountpoint: "{{ item.mountpoint|default(omit) }}"
    primarycache: "{{ item.primarycache|default(omit) }}"
    quota: "{{ item.quota|default(omit) }}"
    recordsize: "{{ item.recordsize|default(omit) }}"
    sharenfs: "{{ item.sharenfs|default(omit) }}"
    state: "{{ item.state }}"
    sync: "{{ item.sync|default(omit) }}"
    snapdev: "{{ item.snapdev|default('hidden')}}"
    snapdir: "{{ item.snapdir|default('hidden')}}"
  with_items: "{{ zfs_filesystems }}"
  when: zfs_create_filesystems

- name: manage_zfs | managing volumes
  zfs:
    name: "{{ item.pool }}/{{ item.name }}"
    compression: "{{ item.compression|default(omit) }}"
    dedup: "{{ item.dedup|default(omit) }}"
    quota: "{{ item.quota|default(omit) }}"
    primarycache: "{{ item.primarycache|default(omit) }}"
    recordsize: "{{ item.recordsize|default(omit) }}"
#    shareiscsi: "{{ item.shareiscsi|default(omit) }}"
    state: "{{ item.state }}"
    sync: "{{ item.sync|default(omit) }}"
    logbias: "{{ item.logbias|default(omit) }}"
    volsize: "{{ item.volsize|default(omit) }}"
  notify:
    - restart iscsitarget
  with_items: "{{ zfs_volumes }}"
  when: zfs_create_volumes

- name: manage_zfs | Setting ZFS Filesystem Permissions
  file:
    path: "{{ item.mountpoint }}"
    mode: "{{ item.mode|default(omit) }}"
    owner: "{{ item.owner|default(omit) }}"
    group: "{{ item.group|default(omit) }}"
  with_items: "{{ zfs_filesystems }}"
  when: zfs_manage_filesystem_permissions

- name: manage_zfs | configuring iscsi devices
  template:
    src: etc/iet/ietd.conf.j2
    dest: /etc/iet/ietd.conf
    owner: root
    group: root
    mode: 0600
  notify:
    - restart iscsitarget
  when: >
        zfs_enable_iscsi is defined and
        zfs_enable_iscsi

- name: manage_zfs | configuring iscsi device access
  template:
    src: etc/iet/initiators.allow.j2
    dest: /etc/iet/initiators.allow
    owner: root
    group: root
    mode: 0644
  notify:
    - restart iscsitarget
  when: >
        zfs_enable_iscsi is defined and
        zfs_enable_iscsi

- name: manage_zfs | configuring iscsi targets access
  template:
    src: etc/iet/targets.allow.j2
    dest: /etc/iet/targets.allow
    owner: root
    group: root
    mode: 0644
  notify:
    - restart iscsitarget
  when: >
        zfs_enable_iscsi is defined and
        zfs_enable_iscsi
